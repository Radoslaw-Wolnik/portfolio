version: '3.8'

services:
  reverse-proxy:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.swarmMode=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.file.directory=/etc/traefik/dynamic_conf" # the traefic dynamic conf file
      - "--providers.file.watch=true"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./certs:/certs:ro"
      - "./letsencrypt:/letsencrypt"
      - "./traefik_dynamic_conf:/etc/traefik/dynamic_conf:ro"
    networks:
      - frontend-network
      - backend-network
    secrets:
      - domain_name
      - letsencrypt_email
      - traefik_auth
      - rate_limit_average
      - rate_limit_burst
    environment:
      - DOMAIN_NAME=/run/secrets/domain_name
      - LETSENCRYPT_EMAIL_FILE=/run/secrets/letsencrypt_email
      - RATE_LIMIT_AVERAGE=${rate_limit_average}
      - RATE_LIMIT_BURST=${rate_limit_burst}
      - NODE_ENV=${NODE_ENV:-development}
      # Comment out or remove the next line if not using Let's Encrypt in development
      - CERT_RESOLVER=${CERT_RESOLVER:-}
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`${DOMAIN_NAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.tls=true"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.middlewares.auth.basicauth.usersfile=/run/secrets/traefik_auth"
        - "traefik.http.routers.traefik.tls.certresolver=${CERT_RESOLVER:-}" # cert resolver
      # - "traefik.http.routers.traefik.middlewares=auth,rate-limit"
      # - "traefik.http.middlewares.rate-limit.ratelimit.average=${RATE_LIMIT_AVERAGE}"
      # - "traefik.http.middlewares.rate-limit.ratelimit.burst=${RATE_LIMIT_BURST}"


  frontend:
    image: frontend-image:latest
    secrets:
      - domain_name
    environment:
      - NODE_ENV=${NODE_ENV:-development} 
      - VITE_API_URL=https://${domain_name}/api
      - DOMAIN_NAME=/run/secrets/domain_name
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - frontend-network
    ports:
      - "3000:5173"  # Map container port 5173 to host port 3000 for dev
    depends_on:
      - reverse-proxy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - "traefik.enable=true"
      # - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`)"
        - "traefik.http.routers.frontend.rule=Host(`popsbops.localhost`)"
        - "traefik.http.services.frontend.loadbalancer.server.port=5173"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls=true"
        - "traefik.docker.network=frontend-network"
        #- "traefik.http.routers.frontend.tls.certresolver=${CERT_RESOLVER:-}"
        #- "traefik.http.middlewares.frontend-security-headers.headers.customresponseheaders.X-Frame-Options=SAMEORIGIN"
        #- "traefik.http.middlewares.frontend-security-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
        #- "traefik.http.routers.frontend.middlewares=frontend-security-headers"

  backend:
    image: backend-image:latest
    secrets:
      - domain_name
      - db_name
      - db_user
      - db_password
      - jwt_secret
      - encryption_key
      - email_host
      - email_port
      - email_user
      - email_password
      - email_from
    environment:
      - NODE_ENV=${NODE_ENV:-development} 
      - PORT=5000
      - FRONTEND=https://${domain_name}
      - DB_NAME_FILE=/run/secrets/db_name
      - DB_USER_FILE=/run/secrets/db_user
      - DB_PASS_FILE=/run/secrets/db_password
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - ENCRYPTION_KEY_FILE=/run/secrets/encryption_key
      - EMAIL_HOST_FILE=/run/secrets/email_host
      - EMAIL_PORT_FILE=/run/secrets/email_port
      - EMAIL_USER_FILE=/run/secrets/email_user
      - EMAIL_PASS_FILE=/run/secrets/email_password
      - EMAIL_FROM_FILE=/run/secrets/email_from
      - OLD_ENCRYPTION_KEY=""
      - ROTATION_IN_PROGRESS=false
      - DB_URI=""
      - DOMAIN_NAME=/run/secrets/domain_name
    volumes:
      - ./backend/src:/app/src:delegated
      - ./backend/nodemon.json:/app/nodemon.json
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    networks:
      - backend-network
    depends_on:
      - reverse-proxy
      - mongo
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - "traefik.enable=true"
      #  - "com.docker.stack.namespace=${STACK_NAME}"
        - "traefik.http.routers.backend.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls=true"
        - "traefik.http.services.backend.loadbalancer.server.port=5000"
      # - "traefik.http.routers.frontend.tls.certresolver=${CERT_RESOLVER:-}"

  mongo:
    image: mongo-image:6.0
    volumes:
      - mongo-data:/data/db
      - ./backend/mongo/init-mongo-swarm.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
      # - ./backend/mongo/mongod.conf:/etc/mongod.conf:ro
    secrets:
      - db_root_username
      - db_root_password
      - db_name
      - db_user
      - db_password
    environment:
      - MONGO_INITDB_DATABASE_FILE=/run/secrets/db_name
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - backend-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      rollback_config:
        parallelism: 1
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    # security_opt:
    #   - no-new-privileges:true

  redis:
    image: redis:6.2
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    deploy:
      replicas: 1


networks:
  frontend-network:
    name: ${STACK_NAME}_frontend
    driver: overlay
    attachable: true
  backend-network:
    name: ${STACK_NAME}_backend
    driver: overlay
    attachable: true

volumes:
  mongo-data:
  uploads:
  redis-data:

secrets:
  domain_name:
    external: true
  letsencrypt_email:
    external: true
  traefik_auth:
    external: true
  rate_limit_average:
    external: true
  rate_limit_burst:
    external: true
  db_root_username:
    external: true
  db_root_password:
    external: true
  db_name:
    external: true
  db_user:
    external: true
  db_password:
    external: true
  jwt_secret:
    external: true
  encryption_key:
    external: true
  email_host:
    external: true
  email_port:
    external: true
  email_user:
    external: true
  email_password:
    external: true
  email_from:
    external: true